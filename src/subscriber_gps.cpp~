#include <ros/ros.h>
#include <ros/types.h>
#include <std_msgs/Header.h>
#include <ardrone_autonomy/navdata_gps_channel.h>
#include <gps_communication/conversions.h>
#include "std_msgs/String.h"
#include "ardrone_autonomy/navdata_gps.h"
#include "gps_communication/Coordinate_utm.h"
#include <iomanip>

double northing, easting;
std::string zone;
bool latch=TRUE;

void poseMessageReceived (const ardrone_autonomy::navdata_gps& msg)
	{
	//ROS_INFO("%lf - %lf",msg.latitude, msg.longitude);
	
    gps_common::LLtoUTM(msg.latitude, msg.longitude, northing, easting, zone);
	ROS_INFO("Northing=(%lf) Easting=(%lf) Zone=(%s)",northing, easting,zone.c_str());
    }

int main(int argc, char **argv)
	{
  	ros::init(argc, argv, "subscriber");
  	ros::NodeHandle n_sub;
    ros::NodeHandle n_pub;	
	gps_communication::Coordinate_utm mess;
	
	
  	ros::Subscriber sub = n_sub.subscribe("ardrone/navdata_gps", 1000, poseMessageReceived);
	ros::Publisher pub=n_pub.advertise<gps_communication::Coordinate_utm>("UTM_4LINE", 1000,latch);
	
	while (ros::ok())
     {
		mess.northing=(float)northing;	
		mess.easting=(float)easting;

		pub.publish(mess);	
		ros::Rate loop_rate(10);
	ros::spinOnce();
	}

  	return 0;
	}
